class Solution {
public:
    int max_profit(vector<int>&prices,int buy,int index,vector<vector<vector<int>>>&dp,int limit){
            if(index==prices.size()){
                return 0;
            }
            if(limit==0){
                return 0;
            }
            if(dp[index][buy][limit]!=-1){
                return dp[index][buy][limit];
            }
            if(buy){
                // buy or skip
                int include=-prices[index]+max_profit(prices,0,index+1,dp,limit);
                int not_include=max_profit(prices,1,index+1,dp,limit);
                return dp[index][buy][limit]=max(include,not_include);
            }
            int include=prices[index]+max_profit(prices,1,index+1,dp,limit-1);
            int not_include=max_profit(prices,0,index+1,dp,limit);
            return dp[index][buy][limit]=max(include,not_include);
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));
        return max_profit(prices,1,0,dp,2);
    }
};
